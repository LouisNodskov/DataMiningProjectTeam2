2 + 8
log10(100)
log2(32)
sqrt(2)
x <- 100
x
mode(x)
class(x)
y <- "gene"
mode(y)
x1 <- 50
x2 <- 15
sum <- x1 + x2
sum
diff <- x1 - x2
div <- x1/x2
print(paste("sum", sum, sep="="))
print(paste("diff", diff, sep="="))
print(paste("div", div, sep="="))
d1 <- "Sunday"
d2 <- "April 1, 2019"
print(paste(d1,d2,sep=":"))
a <- c(1,7,6,2)
print(a)
wknd <- c("Saturday", "Sunday")
logical <- c(TRUE, TRUE, FALSE)
which(logical)
print(a[2])
print(a[2:4])
print(a[-1])
v1 <- c(100,200,300,400,500)
v2 <- c(900,800,700,600,500)
v3 <- c(v1, v2)
print(v3)
print(v3[c(1,4,5)])
s1 <- seq(1,6)
print(s1)
s2 <- seq(1,6, by=2)
print(s2)
r <- rep(5,7)
print(r)
m <- c(rep(1,5), seq(2,5), seq(6,20, by=2))
print(m)
students <- c(rep("F",4), rep("M",4))
students
students_factor <- factor(students)
print(students_factor)
v1 <- c(100,200,300,400,500)
c2 <- c(900,800,700,600,500)
sumVector <- v1+v2
sumVector
sumVector[1:2]
organism <- c("Human", "Mouse", "Fruit", "Fly", "Roundworm", "Yeast")
estGeneCount <- c(30000, 30000, 13061, 19099, 6034)
genomeSizeBP <- c(3000000000, 3000000000, 135600000, 97000000, 12100000)
organism <- c("Human", "Mouse", "Fruit Fly", "Roundworm", "Yeast")
ex2seq <- c(seq(1,9), seq(10,18, by=2), rep(20,5))
ex2seq
print(v3)
y <- matrix(v3, nrows=2)
y <- matrix(v3, nrow=2)
print(y)
z <- matrix(v3, nrow = 2, byrow = T)
print(z)
genusName <- c("Homo", "Mus", "Drosophila", "Caenorhabditis", "Saccharomyces")
speciesName <- c("sapiens", "musculus", "melanogaster", "elegans", "cerevisae")
taxon <- c(organism, genusName, speciesName)
taxon
taxonMatrix <- matrix(taxon, nrow = 3, byrow = T)
taxonMatrix
listA <- list(1, "ROX", 5.5, "HIGH")
print(listA)
listA[[2]]
listA <- list(1, "ROX1", 5.5, "HIGH")
listA[[2]]
listB <- list(genus="Homo", species="sapiens", dist=28)
print(listB$genus)
print(names(listB))
listC <- list(genus=c("Homo", "Pan"), species=c("sapiens", "troglotydes"), dist=c(28,14))
print(listC)
organism<-c("Human","Mouse","Fruit Fly", "Roundworm","Yeast")
genusName<-c("Homo","Mus","Drosophila","Caenorhabditis","Saccharomyces")
speciesName<-c("sapiens","musculus","melanogaster","elegans","cerevisiae")
estGeneCount<-c(30000,30000,13061,19099,6034)
genomeSizeBP<-c(3000000000,3000000000,135600000,97000000,12100000)
sheet1<-data.frame(organism=organism,genus=genusName, species=speciesName, genomeSizeBP=genomeSizeBP, estGeneCount=estGeneCount)
print(sheet1)
print(cars)
print(cars[1,2])
print(cars[1,])
print(cars[,1])
cars[1:5,]
cars[1:5,1]
print(getwd())
setwd("..")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
print(getwd())
setwd("./Documents")
print(getwd())
dat <-read.table(file="C:\Users\rchap\OneDrive\Courses\BIOI4890\iris.data", sep=',')
dat <-read.table(file="C:\\Users\\rchap\\OneDrive\\Courses\\BIOI4890\\iris.data", sep=',')
print(colnames(dat))
print(dat[1:10,])
small.dat <- dat[1:10,]
write.table(small.dat, file="C:\\Users\\rchap\\OneDrive\\Courses\\BIOI4890\\week10\\small.iris.txt")
plot(cars)
plot(cars, xlim=range(5:10), ylim=range(20:40))
plot(cars, type="p")
plot(cars, type="b")
plot(cars, type="b", pch=2)
plot(cars, type="b", pch=3)
plot(cars, type="b", pch=3, col="blue")
plot(cars, type="b", las=0)
plot(cars, type="b", las=1)
plot(cars, type="b", las=0)
plot(cars, type="b", las=1)
plot(cars, type="b", las=2)
plot(cars, main="Time required to stop", xlab="speed mph", ylab="dist miles", type="o", col=blue)
plot(cars, main="Time required to stop", xlab="speed mph", ylab="dist miles", type="o", col="blue")
legend(4,120,c("speed"),pch=c(3),col=c("blue"))
png("C:\\Users\\rchap\\OneDrive\\Courses\\BIOI4890\\week10\\plot1.png")
plot(cars, main="Time required to stop", xlab="speed mph", ylab="dist miles", type="o", col="blue")
legend(4,120,c("speed"),pch=c(3),col=c("blue"))
dev.off()
barplot(c(1,4,10))
png("C:\\Users\\rchap\\OneDrive\\Courses\\BIOI4890\\week10\\plot1.png")
plot(cars, main="Time required to stop", xlab="speed mph", ylab="dist miles", type="o", col="blue")
legend(4,120,c("speed"),pch=c(3),col=c("blue"))
dev.off()
png("plot1.png")
plot(cars, main="Time required to stop", xlab="speed mph", ylab="dist miles", type="o", col="blue")
legend(4,120,c("speed"),pch=c(3),col=c("blue"))
dev.off()
barplot(c(1,4,10), names.arg = c("lab1", "lab2", "lab3"))
print(students_factor)
barplot(summary(students_factor))
barplot(sheet1$estGeneCount, names.arg = sheet1$organism, ylab = "EST Gene Count", main = "EST Gene Count for multiple Organisms")
barplot(sheet1$genomeSizeBP, names.arg=sheet1$organism, ylab="Genome Size(BP)", col="red")
par(mfrow=c(1,2))
barplot(sheet1$estGeneCount, names.arg = sheet1$organism, ylab = "EST Gene Count", main = "EST Gene Count for multiple organisms")
barplot(sheet1$genomeSizeBP, names.arg=sheet1$organism,ylab="Genome Size(BP)",col="red")
install.packages("reshape2")
library("reshape2")
install.packages("BiocManager")
BiocManager::install(c("limma", "AnnotationDbi"))
library("limma")
print(search())
BiocManager::install("Biostrings")
library(biostrings)
library("Biostrings")
aastrings <- readAAStringSet(filepath = "C:\\Users\\rchap\\OneDrive\\Courses\\BIOI4890\\week10\\uniprot-name_Claudin+organism__Homo+sapiens+(Human)+[9606]_+revi--.fasta")
alphafreq <- alphabetFrequency(aastrings)
View(alphafreq)
View(aastrings)
View(alphafreq)
View(alphafreq)
View(aastrings)
View(alphafreq)
View(alphafreq)
class(alphafreq)
hydrophobic-freq <- table(alphafreq["A"])
alphafreq[["A"]]
alphafreq["A"]
alphafreq[A]
View(alphafreq)
alphafreq[,A]
alphafreq[,"A"]
hydrophobic-freq <- table(alphafreq[,[c("I", "V", "L", "F", "C", "M", "A", "W")])
hydrophobic-freq <- table(alphafreq[,c("I", "V", "L", "F", "C", "M", "A", "W")])
hydrophobicfreq <- table(alphafreq[,c("I", "V", "L", "F", "C", "M", "A", "W")])
print(hydrophobicfreq)
hydrophilicfreq <- table(alphafreq[,c("N", "D", "Q", "E", "K", "R")])
rownames(alphafreq) <- aastrings$names
aastrings$name
aastrings$names
View(aastrings)
aastrings$NAMES
aastrings <- readAAStringSet(filepath = "C:\\Users\\rchap\\OneDrive\\Courses\\BIOI4890\\week10\\uniprot-name_Claudin+organism__Homo+sapiens+(Human)+[9606]_+revi--.fasta", use.names = TRUE)
aastrings
aastrings[].names
aastrings[1]
aastrings[1]$`sp|P56750|CLD17_HUMAN Claudin-17 OS=Homo sapiens OX=9606 GN=CLDN17 PE=1 SV=1`
aastrings[1]$names
aastrings[1][["names"]
aastrings[1][["names"]]
aastrings[1][[3]]
aastrings[1]
aastrings[1,]
aastrings[1,1]
aastrings
aastring[["ranges"]]
afreq <- alphabetFrequency(aastrings)
View(afreq)
hydrophilicfreq <- matrix(alphafreq[,c("N", "D", "Q", "E", "K", "R")])
View(hydrophilicfreq)
afreq[,c("N","D")]
hydrophilicfreq <- matrix(alphafreq[,c("N", "D", "Q", "E", "K", "R")], nrow=27, byrow=T)
hydrophilicfreq <- matrix(alphafreq[,c("N", "D", "Q", "E", "K", "R")], nrow=27, byrow=T)
colnames(hydrophilicfreq(c("N", "D", "Q", "E", "K", "R")))
colnames(hydrophilicfreq(c("N", "D", "Q", "E", "K", "R"))
)
colnames(hydrophilicfreq) <- c("N", "D", "Q", "E", "K", "R")
hydrophilicfreq <- matrix(alphafreq[,c("N", "D", "Q", "E", "K", "R")], nrow=27, bycol=T)
hydrophilicfreq <- matrix(alphafreq[,c("N", "D", "Q", "E", "K", "R")], nrow=27)
colnames(hydrophilicfreq) <- c("N", "D", "Q", "E", "K", "R")
hydrophobicfreq <- matrix(alphafreq[,c("I", "V", "L", "F", "C", "M", "A", "W")], nrow=27)
colnames(hydrophobicfreq) <- c("I", "V", "L", "F", "C", "M", "A", "W")
View(hydrophobicfreq)
aastrings[,3]
aastrings[,4]
aastrings[,"names"]
aastrings[,names]
names(aastrings)
prots <- names(aastrings)
prots <- names(aastrings)[11:21]
prots <- substr(names(aastrings), 11, 21)
width(aastrings)
widths <- width(aastrings)
hydrophobictot <- sum(hydrophobicfreq)
hydrophobictot <- sum(hydrophobicfreq[,])
hydrophobictot <- rowsum(hydrophobicfreq[,])
hydrophobictot <- rowsum(hydrophobicfreq)
hydrophobictot <- rowSums(hydrophobicfreq)
hydrophilictot <- rowSums(hydrophilicfreq)
protfreqs <- (protein=prots, hydrophoicpercent=(hydrophilictot/widths), hydrophilicpercent(hydrophilictot/widths))
protfreqs <- (protein=prots, hydrophoicpercent=(hydrophilictot/widths), hydrophilicpercent=(hydrophilictot/widths))
hydrophilicpercent <- hydrophilictot/widths
hydrophobicpercent <- hydrophobictot/widths
protfreqs <- (protein=prots, hydrophoicpercent=hydrophobicpercent, hydrophilicpercent=hydrophilicpercent
protfreqs <- (protein=prots, hydrophoicpercent=hydrophobicpercent, hydrophilicpercent=hydrophilicpercent)
protfreqs <- (protein=prots,hydrophoicpercent=hydrophobicpercent, hydrophilicpercent=hydrophilicpercent)
protfreqs <- data.frame(protein=prots, hydrophoicpercent=(hydrophilictot/widths), hydrophilicpercent=(hydrophilictot/widths))
View(protfreqs)
protfreqs <- data.frame(protein=prots, hydrophoicpercent=(hydrophobictot/widths), hydrophilicpercent=(hydrophilictot/widths))
barplot(c(protfreqs$hydrophilicpercent,protfreqs$hydrophoicpercent), names.arg =protfreqs$protein)
barplot(c(protfreqs$hydrophilicpercent,protfreqs$hydrophoicpercent))
barplot(c(protfreqs$hydrophilicpercent,protfreqs$hydrophoicpercent))
par(mfrow=c(1))
par(mfrow=c(1,1))
barplot(c(protfreqs$hydrophilicpercent,protfreqs$hydrophoicpercent))
barplot(c(protfreqs$hydrophilicpercent,protfreqs$hydrophoicpercent), names.arg = protfreqs$protein)
freqs <- table(protfreqs$hydrophoicpercent, protfreqs$hydrophilicpercent)
barplot(freqs, names.arg = protfreqs$protein)
freqs <- c(protfreqs$hydrophoicpercent, protfreqs$hydrophilicpercent)
barplot(freqs, names.arg = protfreqs$protein)
barplot(matrix(c(protfreqs$hydrophilicpercent,protfreqs$hydrophoicpercent), nrow=2) , names.arg = protfreqs$protein)
barplot(matrix(c(protfreqs$hydrophilicpercent,protfreqs$hydrophoicpercent), nrow=2) , names.arg = protfreqs$protein, beside = TRUE)
barplot(matrix(c(protfreqs$hydrophilicpercent,protfreqs$hydrophoicpercent), nrow=2, byrow = T) , names.arg = protfreqs$protein)
barplot(matrix(c(protfreqs$hydrophilicpercent,protfreqs$hydrophoicpercent), nrow=2, byrow = T) , names.arg = protfreqs$protein, beside = TRUE)
barplot(matrix(c(protfreqs$hydrophilicpercent,protfreqs$hydrophoicpercent), nrow=2, byrow = T) , names.arg = protfreqs$protein, beside = TRUE, las=2)
View(alphafreq)
View(afreq)
View(aastrings)
names(aastrings)
prots <- names(aastrings)[59:64]
names(aastrings)[59:64]
substr(names(aastrings)[59:64])
substr(names(aastrings), 59, 64)
substr(names(aastrings), 61, 67)
substring(names(aastrings), regexpr("GN=",names(aastrings)) + 1)
substring(names(aastrings), regexpr("GN=",names(aastrings)) + 3)
substring(names(aastrings), regexpr("GN=",names(aastrings)) + 3, regexpr(" PE", names(aastrings)))
substring(names(aastrings), regexpr("GN=",names(aastrings)) + 3, regexpr(" PE", names(aastrings) -1))
substring(names(aastrings), regexpr("GN=",names(aastrings)) + 3, regexpr(" PE", names(aastrings) - 1))
substring(names(aastrings), regexpr("GN=",names(aastrings)) + 3, regexpr(" PE", names(aastrings)) - 1)
protfreqs <- data.frame(protein=prots, hydrophoicpercent=(hydrophilictot/widths), hydrophilicpercent=(hydrophilictot/widths))
proteins = substring(names(aastrings), regexpr("GN=",names(aastrings)) + 3, regexpr(" PE", names(aastrings)) - 1)
protfreqs <- data.frame(protein=prots, hydrophoicpercent=(hydrophilictot/widths), hydrophilicpercent=(hydrophilictot/widths))
prots <- substring(names(aastrings), regexpr("GN=",names(aastrings)) + 3, regexpr(" PE", names(aastrings)) - 1)
protfreqs <- data.frame(protein=prots, hydrophoicpercent=(hydrophilictot/widths), hydrophilicpercent=(hydrophilictot/widths))
barplot(matrix(c(protfreqs$hydrophilicpercent,protfreqs$hydrophoicpercent), nrow=2, byrow = T) , names.arg = protfreqs$protein, beside = TRUE, las=2)
protfreqs <- data.frame(protein=prots, hydrophoicpercent=(hydrophobictot/widths), hydrophilicpercent=(hydrophilictot/widths))
barplot(matrix(c(protfreqs$hydrophilicpercent,protfreqs$hydrophoicpercent), nrow=2, byrow = T) , names.arg = protfreqs$protein, beside = TRUE, las=2)
png("challenge1.png")
barplot(matrix(c(protfreqs$hydrophilicpercent,protfreqs$hydrophoicpercent), nrow=2, byrow = T) , names.arg = protfreqs$protein, beside = TRUE, las=2)
dev.off()
save.image("C:\\Users\\rchap\\OneDrive\\Courses\\BIOI4890\\week10\\week10.RData"
)
library(org.Hs.eg.db)
library(org.Hs.eg.db)
BiocManager::install("org.Hs.eg.db")
library(org.Hs.eg.db)
remotes::install_version("RSQLite", version = "2.2.5")
library(remotes)
load("C://Users/rchap/OneDrive/Courses/ISQA4150/Intro.R")
read("C://Users/rchap/OneDrive/Courses/ISQA4150/Intro.R")
library(ggplot2)
# set your working directory to the current file directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Read DataSet from CSV and add column headers
dataset <- read.csv("Data-Files/Census-Project.data", header = FALSE)
colnames(dataset) <- c("Age", "WorkClass", "fnlwgt", "Education", "EducationNum", "MaritalStatus", "Occupation", "Relationship", "Race", "Sex", "CapitalGain", "CapitalLoss", "HoursPerWeek", "NativeCountry", "Income")
# Replace ? with and remove lines missing values
dataset[dataset == "?"] <- NA
noNaValues <- na.omit(dataset)
# Plotting
ggplot(noNaValues, aes(y=Age, x=Income)) + geom_boxplot() + ggtitle("Average Age of Each Income Class")
summary(noNaValues$Age)
# Plotting
ggplot(noNaValues, aes(y=Age, x=Income, fill=Income)) + geom_boxplot() + ggtitle("Average Age of Each Income Class")
View(noNaValues)
ggplot(noNaValues, aes(y=HoursPerWeek, x=Income, fill=Income)) + geom_boxplot() + ggtitle("Average Age of Each Income Class")
ggplot(noNaValues, aes(y=HoursPerWeek, x=Income, fill=Income)) + geom_bar() + ggtitle("Average Age of Each Income Class")
ggplot(noNaValues, aes(y=HoursPerWeek, x=Income)) + geom_bar() + ggtitle("Average Age of Each Income Class")
ggplot(noNaValues, aes(y=HoursPerWeek, x=Income)) + geom_bar() + ggtitle("Average Age of Each Income Class")
ggplot(noNaValues, aes(y=HoursPerWeek, x=Income)) + geom_bar(position="stack", stat="identity") + ggtitle("Average Age of Each Income Class")
ggplot(noNaValues, aes(y=HoursPerWeek, x=Income, fill=Income)) + geom_bar(position="stack", stat="identity") + ggtitle("Average Age of Each Income Class")
ggplot(noNaValues, aes(y=Race, x=Income, fill=Race)) + geom_bar(position="stack", stat="identity") + ggtitle("Average Age of Each Income Class")
ggplot(noNaValues, aes(y=Race, x=Income, fill=Race)) + geom_bar(position="stack") + ggtitle("Average Age of Each Income Class")
ggplot(noNaValues, aes(y=Race, x=Income, fill=Race)) + geom_bar(position="stack", stat="identity") + ggtitle("Average Age of Each Income Class")
ggplot(noNaValues, aes(x=Income, fill=Race)) + geom_bar(position="stack", stat="identity") + ggtitle("Average Age of Each Income Class")
ggplot(noNaValues, aes(y=Race x=Income, fill=Race)) + geom_bar(position="stack", stat="count") + ggtitle("Average Age of Each Income Class")
ggplot(noNaValues, aes(y=Race, x=Income, fill=Race)) + geom_bar(position="stack", stat="count") + ggtitle("Average Age of Each Income Class")
ggplot(noNaValues, aes(y=Race fill=Race)) + geom_bar(position="stack", stat="count") + ggtitle("Average Age of Each Income Class")
ggplot(noNaValues, aes(y=Race, fill=Race)) + geom_bar(position="stack", stat="count") + ggtitle("Average Age of Each Income Class")
ggplot(noNaValues, aes(y=Race, fill=Race)) + geom_bar(position="stack", stat="count") + ggtitle("Distribution of Races in Dataset")
ggplot
# Plotting
ggplot(noNaValues, aes(y=Age, x=Income, fill=Income)) + geom_boxplot() + ggtitle("Average Age of Each Income Class")
ggplot(noNaValues, aes(y=Income, fill=Race)) + geom_bar(position="stack", stat="count") + ggtitle("Distribution of Races in Dataset")
ggplot(noNaValues, aes(x=Income, fill=Race)) + geom_bar(position="stack", stat="count") + ggtitle("Distribution of Races in Dataset")
ggplot(noNaValues, aes(x=Income, fill=WorkClass)) + geom_bar(position="stack", stat="count") + ggtitle("Distribution of Work-Classes per Income Class")
ggplot(noNaValues, aes(x=Income, fill=Race)) + geom_bar(position="stack", stat="count") + ggtitle("Distribution of Races per Income Class")
ggplot(noNaValues, aes(x=MaritalStatus, fill=Race)) + geom_bar(position="stack", stat="count") + ggtitle("Distribution of Races per Income Class")
ggplot(noNaValues, aes(x=MaritalStatus, fill=Race)) + geom_bar(position="stack", stat="count") + ggtitle("Distribution of MaritalStatus per Income Class")
ggplot(noNaValues, aes(x=Income, fill=MaritalStatus)) + geom_bar(position="stack", stat="count") + ggtitle("Distribution of MaritalStatus per Income Class")
ggplot(noNaValues, aes(x=Income, fill=MaritalStatus)) + geom_bar(position="stack", stat="count") + ggtitle("Distribution of Marital Status per Income Class")
ggplot(noNaValues, aes(x=Income, fill=Occupation)) + geom_bar(position="stack", stat="count") + ggtitle("Distribution of Occupations per Income Class")
ggplot(noNaValues, aes(x=Income, fill=Relationship)) + geom_bar(position="stack", stat="count") + ggtitle("Distribution of Familial Relationship Status per Income Class")
ggplot(noNaValues, aes(x=Income, fill=NativeCountry)) + geom_bar(position="stack", stat="count") + ggtitle("Distribution of Country of Origin per Income Class")
ggplot(noNaValues, aes(x=HoursPerWeek, fill=Income)) + geom_scatter()
ggplot(noNaValues, aes(x=HoursPerWeek, fill=Income)) + geom_point()
ggplot(noNaValues, aes(x=Income, y=HoursPerWeek, fill=Income)) + geom_point()
ggplot(noNaValues, aes(x=Income, y=HoursPerWeek, fill=Income)) + geom_boxplot()
ggplot(noNaValues, aes(x=Income, y=HoursPerWeek, fill=Income)) + geom_area()
ggplot(noNaValues, aes(x=Income, y=HoursPerWeek, fill=Income)) + geom_boxplot()
testSet <- noNaValues
levels(testSet$Sex)
factors(testSet$Sex)
testSet$Sex
table(noNaValues$Age)
table(noNaValues$Occupation)
table(noNaValues$WorkClass)
table(noNaValues$Education)
table(noNaValues$MaritalStatus)
table(noNaValues$Race)
table(noNaValues$Sex)
table(noNaValues$NativeCountry)
testSet[NativeCountry != "United-States"] <- "Outside-US"
testSet[testSet$NativeCountry != "United-States"] <- "Outside-US"
View(dataset)
View(testSet)
testSet$NativeCountry[NativeCountry != "United-States"] <- "Outside-US"
testSet$NativeCountry[testSet$NativeCountry !="UnitedStates"] <- "Outside-US"
table(testSet)
table(testSet$NativeCountry)
testSet <- noNaValues
testSet$NativeCountry[testSet$NativeCountry !="United-States"] <- "Outside-US"
table(testSet$NativeCountry)
testSet$Sex[testSet$Sex == "Male"] <- 0
testSet$Sex[testSet$Sex == "Female"] <- 1
table(testSet$Sex)
testSet$Education <- unclass(testSet$Education)
unclass(testSet$Education)
testSet$Education <- sapply(testSet$Education, unclass)
sapply(testSet$Education, unclass)
levels(testSet$Education)
testSet$Education
str(testSet$Education)
class(testSet$Education)
unique(testSet$Education)
factors(testSet$Education, levels = unique(testSet$Education))
factor(testSet$Education, levels = unique(testSet$Education))
testSet$Education <- as.factor(testSet$Education)
factors(testSet$Education)
levels(testSet$Education)
testSet$Education <- sapply(testSet$Education, unclass)
maxEducation <- max(levels(testSet$Education))
levels(testSet$Education)
maxEducation <- max(levels(as.factor(testSet$Education)))
as.factor(testSet$Education)
levels(as.factor(testSet$Education))
as.integer(levels(as.factor(testSet$Education)))
max(as.integer(levels(as.factor(testSet$Education))))
max(levels(as.factor(testSet$Education)))
max(as.integer(levels(as.factor(testSet$Education))))
# Normalize Data
## Created a test Dataset to do this on
testSet <- noNaValues
testSet$NativeCountry[testSet$NativeCountry !="United-States"] <- "Outside-US"
testSet$Sex[testSet$Sex == "Male"] <- 0
testSet$Sex[testSet$Sex == "Female"] <- 1
dataset$Income <- replace(dataset$Income, dataset$Income=='<=50K', 0)
dataset$Income <- replace(dataset$Income, dataset$Income=='>50K', 1)
testSet$Education <- as.factor(testSet$Education)
testSet$Education <- as.factor(sapply(testSet$Education, unclass))
levels(testSet$Education)
max(testSet$Education)
# Normalize Data
## Created a test Dataset to do this on
testSet <- noNaValues
testSet$NativeCountry[testSet$NativeCountry !="United-States"] <- "Outside-US"
testSet$Sex[testSet$Sex == "Male"] <- 0
testSet$Sex[testSet$Sex == "Female"] <- 1
testSet$Education <- as.factor(testSet$Education)
testSet$Education <- sapply(testSet$Education, unclass)
max(testSet$Education)
testSet <- transform(testSet, Education = Education/maxEducation)
testSet <- transform(testSet, Education = Education / maxEducation)
testSet <- transform(testSet, Education = Education / maxEducation, 1)
class(testSet$Education)
calss(maxEducation)
class(maxEducation)
as.integer(max(testSet$Education))
maxEducation <- max(testSet$Education)
maxEducation <- as.integer(max(testSet$Education))
maxEducation
testSet <- transform(testSet, Education = Education / maxEducation, 1)
max(testSet$Age)
maxAge <- max(testSet$Age)
testSet <- transform(testSet, Age = Age / maxAge)
